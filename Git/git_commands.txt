    ### Initializing ###
-- Clone the remote repository
git clone <URL>

-- Init the new one repository: it creates .git directory with the git-specific data
git init

    ### Output ###
-- Show last 5 commits in the pretty mode
git log -5 --graph --decorate --pretty=oneline --abbrev-commit

-- Show last commit or current commit
git show

-- Show files in the index and the working tree (--cached by default)
git ls-files

 -- List the contents of a tree object (what is commited?)
git ls-tree HEAD

-- Shows all remote repositories URLs
git remote -v

-- Show remote repositories with the remote branches and linkage with with local
git remote show origin

-- Shows all remote and local branches
git branch -a


    ### Work with branches  ###
-- Rebases <branch2> to <branch1> AND (!) checkout to <branch2> (interactively or not [-i])
git rebase -i <branch1> <branch2>

-- Interactively rebase the current branch to the specified branch (pointer): includes manipulation with commits and move the pointer
git rebase -i <branch, commit SHA>

-- Move HEAD to the commit/branch. If a commit specified, then the branch in a detached state.
-- This changes the working tree and the staging area corresponding to the commit/branch specified.
-- Note: might want to save the working tree and the staging area by the git stash push (desribed below)
git checkout <commit/branch>

-- Move the HEAD for the 1-st or the second parent appropriately
git checkout HEAD^
git checkout HEAD^2
git checkout HEAD~^2~2  -> move for 1 commit down, for the second parent and for 2 commits down

-- Move the specified branch to the current commit (where the HEAD now), (!) BUT not checkout the branch
git branch -f <branch>

-- Moves the HEAD pointer AND the current branch's pointer where HEAD points to to the commit specified:
git reset --hard <commit>   -- update all the trees with the commit's content
git reset --mixed <commit>  -- update staging area along with pointers HEAD and the branch, but no updating working tree content
git reset --soft <commit>   -- no update working tree and the index tree

-- Save the current working tree and the index state:
git stash push              -- saves the current state
git stash pop               -- returns the state back

-- Creates a new branch and checkout to it
git checkout -b <new branch>
--or (not checkout to it)
git branch <new branch>

    ### Cherry-pick ###
git cherry-pick <C1, C2 ... Cn>
-- pick up the specified commits for the current branch and move the branch to the last specified commit

    ### Garbage collector ###
-- Removes the orphaned nodes
git gc

    ### Remotes ###
-- Forcely push the changes to the main of remote origin
git push -f origin main

--  If the branch is created remotely:
git fetch origin
-- will fetch the remote branch and create its remote representation (but not local branch)
  >From https://github.com/mrakul/ProgrammingLab
  > * [new branch]      test2      -> origin/test2
  > git branch --remotes
  >  origin/HEAD -> origin/main
  >  origin/main
  >  origin/test2

-- Then if try to checkout to the local, the branch is just created locally
git checkout test2
  > Switched to a new branch 'test2'
  > M       Git/git_commands.txt
  > Branch 'test2' set up to track remote branch 'test2' from 'origin'.
--Note: makes the same as
git checkout --track origin/test2

-- Push the branch to the remote repository (origin), ('--set-upstream' == '-u'):
git push -u origin dev

-- Remove the remote branch and its local reflection:
git push origin --delete test
-> (!) removes the remote branch (FROM THE REMOTE REPOSITORY) and its local reflection (origin/test)
-> Then you need to remove the local (not remote) branch separately

 -- If remote branches are deleted, but local remotes representation is still exists, this command "cuts"(prunes), removes their representation:
git remote prune origin
 > Pruning origin
 > URL: https://github.com/mrakul/ProgrammingLab.git
 > * [pruned] origin/test2
 > * [pruned] origin/test4

-- Change the origin's URL
git remote set-url origin https://github.com/mrakul/ProgrammingLab.git  https://github.com/mrakul/CCpp-Projects-VS-Code.git

-- Set upstream URL
git remote add upstream <URL>


-- Tie local branch to remote ('--set-upstream' == '-u')
git branch --set-upstream-to=upstream/foo
--or
git branch --set-upstream-to=upstream/foo foo
-> specify foo if it is not the current one
